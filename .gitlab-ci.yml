stages:
  - build
  - deploy

.assume_role: &assume_role
    - >
      STS=($(aws sts assume-role-with-web-identity
      --role-arn ${ROLE_ARN}
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token $ID_TOKEN
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))
    - export AWS_ACCESS_KEY_ID="${STS[0]}"
    - export AWS_SECRET_ACCESS_KEY="${STS[1]}"
    - export AWS_SESSION_TOKEN="${STS[2]}"

build artifact:
  stage: build
  image: node:latest
  before_script:
    - cd website/dripdrop  # Navigate to the directory where package.json is
    - npm install
  script:
    - npm run build
    - ls -lR build
  artifacts:
    paths:
      - website/dripdrop/build/  # Ensure this path matches your build output
    when: always
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: always

deploy s3:
  stage: deploy
  image:
    name: amazon/aws-cli:latest
    entrypoint:
      - '/usr/bin/env'
  id_tokens:
      ID_TOKEN:
        aud: sdmay25-25-s3-deploy
  before_script:
    - cd website/dripdrop
  script:
    # Assume role and check for errors
    - *assume_role
    - echo "Assumed role successfully. Listing the files in the build directory before upload..."
    - ls -lR build # List files before uploading to S3
    - echo "Syncing files to S3..."
    - aws s3 sync build/ s3://$S3_BUCKET  --exact-timestamps --delete # Correct the path to the build folder
    - echo "Listing files in S3 after upload:"
    - aws s3 ls s3://$S3_BUCKET --recursive # List files in the S3 bucket for verification
 
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: always
