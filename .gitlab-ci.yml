stages:
  - build-website
  - build-mobile
  - deploy-to-s3
  - update-cdk

.assume_role: &assume_role
    - >
      STS=($(aws sts assume-role-with-web-identity
      --role-arn ${ROLE_ARN}
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token $ID_TOKEN
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))
    - export AWS_ACCESS_KEY_ID="${STS[0]}"
    - export AWS_SECRET_ACCESS_KEY="${STS[1]}"
    - export AWS_SESSION_TOKEN="${STS[2]}"

build website:
  stage: build-website
  image: node:latest
  before_script:
    - cd website/dripdrop  # Navigate to the directory where package.json is
    - npm install
  script:
    - npm run build
  artifacts:
    paths:
      - website/dripdrop/build/ 
    when: always
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      changes:
        - website/dripdrop/**/*

# build mobile:
#   stage: build-mobile
#   image: node:latest
#   before_script:
#     - cd mobile/dripdrop  # Navigate to the directory where package.json is
#     - npm install  
#   script:
#     - npm run build
#   artifacts:
#     paths:
#       - mobile/dripdrop/build/  
#     when: always
#   rules:
#     - changes:
#       - mobile/dripdrop/**/*  # Only run if changes occur in the website folder
#     - if: '$CI_COMMIT_REF_NAME == "master"'

deploy s3:
  stage: deploy-to-s3
  image:
    name: amazon/aws-cli:latest
    entrypoint:
      - '/usr/bin/env'
  id_tokens:
      ID_TOKEN:
        aud: sdmay25-25-s3-deploy
  before_script:
    - cd website/dripdrop
  script:
    # Assume role and check for errors
    - *assume_role
    - aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
    - echo "Syncing files to S3..."
    - aws s3 sync build/ s3://$S3_BUCKET --delete  # Sync and remove obsolete files
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      changes:
        - website/dripdrop/**/*

update cdk:
  stage: update-cdk
  image:
    name: 626635444817.dkr.ecr.us-east-1.amazonaws.com/aws-cli-with-node:latest  # Use the ECR image
    entrypoint:
      - '/usr/bin/env'
  id_tokens:
    ID_TOKEN:
      aud: sdmay25-25-s3-deploy
  before_script:
    - *assume_role # Assume the necessary role for AWS deployment
  script:
    - echo "Assumed Role Successfully"
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 626635444817.dkr.ecr.us-east-1.amazonaws.com
    - cd aws  # Navigate to the AWS CDK directory
    - npm install  # Install CDK dependencies
    - npx cdk deploy --all
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      # changes:
      #   - aws/**/*




